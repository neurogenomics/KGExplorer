% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/_docs.R, R/make_igraph_object.R,
%   R/plot_ontology.R, R/plot_ontology_circular.R, R/plot_ontology_graphviz.R,
%   R/plot_ontology_heatmap.R, R/plot_ontology_tidygraph.R,
%   R/plot_ontology_visnetwork.R, R/plot_tidygraph.R
\name{plot_}
\alias{plot_}
\alias{make_igraph_object}
\alias{plot_ontology}
\alias{plot_ontology_circular}
\alias{plot_ontology_graphviz}
\alias{plot_ontology_heatmap}
\alias{plot_ontology_tidygraph}
\alias{plot_ontology_visnetwork}
\alias{plot_tidygraph}
\title{Plot functions}
\usage{
make_igraph_object(
  dat,
  ont = get_ontology("hpo"),
  adjacency = ontology_to_adjacency(ont),
  colour_var = "fold_change",
  add_ont_lvl_absolute = FALSE,
  cols = list_columns(extra_cols = c(colour_var, grep("_count$|_values$", names(dat),
    value = TRUE))),
  layout = "fruchtermanreingold",
  verbose = TRUE,
  ...
)

plot_ontology(
  ont,
  terms = NULL,
  types = c("circular", "graphviz", "tidygraph", "visnetwork"),
  ...
)

plot_ontology_circular(ont, ...)

plot_ontology_graphviz(ont, ...)

plot_ontology_heatmap(
  ont,
  to = "similarity",
  row_side_vars = c("ancestor_name"),
  col_side_vars = c("IC", "depth", "n_children", "n_offspring", "n_connected_leaves"),
  col = pals::gnuplot(),
  row_labels = ont@elementMetadata$name,
  column_labels = row_labels,
  show_plot = TRUE,
  save_plot = tempfile(fileext = "plot_ontology_heatmap.pdf"),
  height = 12,
  width = height * 1.1,
  fontsize = ont@n_terms * 4e-04,
  seed = 2023,
  types = c("heatmaply", "ComplexHeatmap")[2],
  ...
)

plot_ontology_tidygraph(ont, ...)

plot_ontology_visnetwork(ont, ...)

plot_tidygraph(g)
}
\arguments{
\item{dat}{\link[data.table]{data.table} with genes.}

\item{ont}{An ontology of class \link[simona]{ontology_DAG}.}

\item{layout}{a network layout supplied by \code{\link[sna]{gplot.layout}},
such as \code{"fruchtermanreingold"} (the default), or a two-column matrix
with as many rows as there are nodes in the network, in which case the
matrix is used as nodes coordinates.}

\item{...}{
  Arguments passed on to \code{\link[ggnetwork:ggnetwork]{ggnetwork::ggnetwork}}, \code{\link[simona:dag_viz]{simona::dag_circular_viz}}, \code{\link[simona:dag_viz]{simona::dag_graphviz}}, \code{\link[base:plot]{base::plot}}, \code{\link[simona:dag_viz]{simona::dag_graphviz}}
  \describe{
    \item{\code{x}}{an object of class \code{\link[network]{network}} or
\code{\link[igraph:igraph-package]{igraph}}, or any object that can be
coerced to that class, such as an adjacency or incidence matrix, or an
edge list: see \code{\link[network]{edgeset.constructors}} and
\code{\link[network]{network}} for details.}
    \item{\code{dag}}{An \code{ontology_Dag} object.}
    \item{\code{highlight}}{A vector of terms to be highlighted on the DAG.}
    \item{\code{start}}{Start of the circle, measured in degree.}
    \item{\code{end}}{End of the circle, measured in degree.}
    \item{\code{partition_by_level}}{If \code{node_col} is not set, users can cut the DAG into clusters with different node colors. The partitioning is applied by \code{\link[simona:partition_by_level]{partition_by_level()}}.}
    \item{\code{partition_by_size}}{Similar as \code{partition_by_level}, but the partitioning is applied by \code{\link[simona:partition_by_size]{partition_by_size()}}.}
    \item{\code{node_col}}{Colors of nodes. If the value is a vector, the order should correspond to terms in \code{\link[simona:dag_all_terms]{dag_all_terms()}}.}
    \item{\code{node_transparency}}{Transparency of nodes. The same format as \code{node_col}.}
    \item{\code{node_size}}{Size of nodes. The same format as \code{node_col}.}
    \item{\code{edge_col}}{A named vector where names correspond to relation types.}
    \item{\code{edge_transparency}}{A named vector where names correspond to relation types.}
    \item{\code{legend_labels_from}}{If partitioning is applied on the DAG, a legend is generated showing different top
terms. By default, the legend labels are the term IDs. If there are additionally column stored
in the meta data frame of the DAG object, the column name can be set here to replace the term IDs as
legend labels.}
    \item{\code{legend_labels_max_width}}{Maximal width of legend labels measured by the number of characters per line. Labels are wrapped into
multiple lines if the widths exceed it.}
    \item{\code{other_legends}}{A list of legends generated by \code{\link[ComplexHeatmap:Legend]{ComplexHeatmap::Legend()}}.}
    \item{\code{use_raster}}{Whether to first write the circular image into a temporary png file, then add to the plot
as a raster object?}
    \item{\code{newpage}}{Whether call \code{\link[grid:grid.newpage]{grid::grid.newpage()}} to create a new plot?}
    \item{\code{verbose}}{Whether to print messages.}
    \item{\code{node_param}}{A list of parameters. Each parameter has the same format. The value can be
a single scalar, a full length vector with the same order as in \code{\link[simona:dag_all_terms]{dag_all_terms()}},
or a named vector that contains a subset of terms that need to be customized.
The full set of parameters can be found at \url{https://graphviz.org/docs/nodes/}.}
    \item{\code{edge_param}}{A list of parameters. Each parameter has the same format. The value can be a single
scalar, or a named vector that contains a subset of terms that need to be customized.
The full set of parameters can be found at \url{https://graphviz.org/docs/edges/}.
If the parameter is set to a named vector, it can be named by relation types \code{c("is_a" = ...)},
or directly relations \code{c("a -> b" = ...)}. Please see the vignette for details.}
    \item{\code{y}}{the y coordinates of points in the plot, \emph{optional}
    if \code{x} is an appropriate structure.}
  }}

\item{types}{Types of graph to produce. Can be one or more.}

\item{to}{Character vector of database(s) to map IDs to.
When not \code{"MONDO"}, can supply multiple alternative databases to map to
 (e.g. \code{c("OMIM","Orphanet","DECIPHER")}).}

\item{row_side_vars}{Variables to include in row-side
metadata annotations.}

\item{col_side_vars}{Variables to include in column-side
metadata annotations.}

\item{col}{A vector of colors if the color mapping is discrete or a color mapping  function if the matrix is continuous numbers (should be generated by \code{\link[circlize]{colorRamp2}}). If the matrix is continuous, the value can also be a vector of colors so that colors can be interpolated. Pass to \code{\link[ComplexHeatmap]{ColorMapping}}. For more details and examples, please refer to \url{https://jokergoo.github.io/ComplexHeatmap-reference/book/a-single-heatmap.html#colors} .}

\item{row_labels}{Optional row labels which are put as row names in the heatmap.}

\item{column_labels}{Optional column labels which are put as column names in the heatmap.}

\item{show_plot}{Print the plot after generating it.}

\item{save_plot}{Path to save plot to.}

\item{height}{Height of the heatmap body.}

\item{width}{Width of the heatmap body.}

\item{fontsize}{Axis labels font size.}

\item{seed}{Set the seed for reproducible clustering.}

\item{top_targets}{\link[data.table]{data.table} of prioritised targets
generated by \link[MultiEWCE]{prioritise_targets}.}
}
\value{
A named list containing the plot and the data.

A \link[igraph]{igraph} object.

Null

Null

Plot

Null

Null
}
\description{
Functions to plot data.
}
\section{Functions}{
\itemize{
\item \code{make_igraph_object()}: plot_
Make an \link[igraph]{igraph} object

This uses the network package to coerce the adjacency matrix into a
network object. It also adds the fold change, label,
and relative ontology level parameters to each node in the network.

It expects there to be a column of HPO IDs in the dat dataframe called
hpo_id.

\item \code{plot_ontology()}: plot_

\item \code{plot_ontology_circular()}: plot_

\item \code{plot_ontology_graphviz()}: plot_
Plot ontology: graphviz

Make a circular plot of an ontology.

\item \code{plot_ontology_heatmap()}: plot_
Plot heatmap

Plot a phenotype x phenotype correlation matrix based on genetic overlap.

\item \code{plot_ontology_tidygraph()}: plot_

\item \code{plot_ontology_visnetwork()}: plot_

\item \code{plot_tidygraph()}: plot_

}}
\examples{
dat <- get_monarch_models()
g <- make_igraph_object(dat = dat)
ont <- get_ontology("hp")
res <- plot_ontology(ont, 
                     terms=100,
                     types="circular",
                     partition_by_level=2,
                     edge_transparency=.9)
ont <- get_ontology("hpo", terms=2)
hm <- plot_ontology_heatmap(ont)
}
\concept{plot_}
\keyword{internal}
